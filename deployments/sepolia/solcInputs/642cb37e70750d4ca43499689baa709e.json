{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror FundMe__NotOwner();\r\n\r\n/** @title A contract for crowd funding\r\n * @author Yomi-Olugbodi Boluwatife\r\n * @notice This contract is to demo a sample funding project\r\n * @dev This implements price feeds as our library\r\n */\r\ncontract FundMe {\r\n    //Type declaration\r\n    using PriceConverter for uint256;\r\n\r\n    //State Variables\r\n    mapping(address => uint256) private s_addressToAmountFunded;\r\n    address[] private s_funders;\r\n\r\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\r\n    address private immutable i_owner;\r\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\r\n\r\n    //Modifiers\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == owner);\r\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\r\n        _;\r\n    }\r\n\r\n    AggregatorV3Interface public s_priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    /**\r\n     * @notice This Function funds this contract\r\n     * @dev This implements price feeds as our library\r\n     */\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\r\n            \"You need to spend more ETH!\"\r\n        );\r\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \"You need to spend more ETH!\");\r\n        s_addressToAmountFunded[msg.sender] += msg.value;\r\n        s_funders.push(msg.sender);\r\n    }\r\n\r\n    function withdraw() public  onlyOwner {\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < s_funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = s_funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n    }\r\n\r\n    function cheaperWithdraw() public onlyOwner {\r\n        address[] memory funders = s_funders;\r\n\r\n         for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            s_addressToAmountFunded[funder] = 0;\r\n\r\n              s_funders = new address[](0);\r\n\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n        }\r\n\r\n    }\r\n\r\nfunction getOnwer() public view returns (address) {\r\n    return i_owner;\r\n}\r\n\r\nfunction getFunder(uint256 index) public view returns (address) {\r\n    return s_funders[index];\r\n}\r\nfunction getAddressToAmountFunded(address funder) public view returns (uint256) {\r\n    return s_addressToAmountFunded[funder];\r\n}\r\n\r\nfunction getPriceFeed( ) public view returns (AggregatorV3Interface) {\r\n    return s_priceFeed;\r\n}\r\n\r\n}\r\n\r\n// Mappings cannot be in memory\r\n\r\n// constructor\r\n// receive\r\n// fallback\r\n// external\r\n// public\r\n// internal\r\n// private\r\n// view / pure\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\n// import \"@chainlink/contracts/abi/v0.8/interfaces/AggregatorV3Interface.sol\"\r\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\r\n\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer * 10000000000);\r\n       \r\n    }\r\n \r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n         AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}